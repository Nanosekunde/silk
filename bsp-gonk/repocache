#!/bin/bash

LOCAL_PATH=$(dirname $0)

usage () {
  local exitcode=0
  if [[ -n ${1:-} ]]; then
    exitcode=1
    echo Error: $@
    echo
  fi
  echo "usage: $0 [fetch|build] board product"
  echo
  echo The repocache tarball is used to speed up the initial sync of a bsp
  echo workspace, while improving reliability, by first populating the .repo/
  echo projects from the tarball. A normal repo sync should then follow to
  echo retrieve any additional commits that were added since the creation of
  echo the tarball.
  echo
  echo "    fetch - Try to fetch a repocache tarball"
  echo "    build - Build a new repocache tarball"
  echo
  echo The REPOCACHE_URLPREFIX environment variable is used to locate the
  echo repocache tarballs, and should be defined before running this program.
  echo "(example: export REPOCACHE_URLPREFIX=http://example.com/repocache-)"
  echo
  exit $exitcode
}

while getopts "h?f" opt; do
  case $opt in
  h|\?)
    usage
    ;;
  *)
    usage Unknown option: $opt
    ;;
  esac
done


command=$1
uname_lc=$(uname | tr A-Z a-z)


case $command in
fetch)
  if [[ ! -d .repo/projects ]] && [[ -n $REPOCACHE_URLPREFIX ]]; then
    repocache_urlsuffixes=$uname_lc-$board-$product.tgz
    [[ -n $2 ]] || usage
    board=$2
    repocache_urlsuffixes=$uname_lc-$board.tgz

    if [[ -n $3 ]]; then
      product=$3
      repocache_urlsuffixes="$uname_lc-$board-$product.tgz $repocache_urlsuffixes"
    fi

    # Search CI_CACHE_DIR for a tarball before hitting the network
    if [[ -n $CI_CACHE_DIR ]] && [[ -r $CI_CACHE_DIR ]]; then
      for repocache_urlsuffix in $repocache_urlsuffixes; do
        tarball=$CI_CACHE_DIR/repocache/${repocache_urlsuffix%.tgz}.tar
        if [[ -r $tarball ]]; then
          (
            set -x
            tar xf $tarball
          )
          exit 0
        fi
      done
    fi

    for repocache_urlsuffix in $repocache_urlsuffixes; do
      set -ex
      if curl -L $REPOCACHE_URLPREFIX$repocache_urlsuffix --output /dev/null --head --fail --silent; then
        if [[ ${CI:-false} = true ]] && [[ -z $CI_DEBUG ]]; then
          # No progress indication when running in CI to be
          # mindful of log length limits
          PROGRESS="-q"
        fi
        if [[ -n $CI_CACHE_DIR ]] && [[ -r $CI_CACHE_DIR ]]; then
          # If CI_CACHE_DIR exists, download and save the tarball there, and
          # try to reuse it next time around.
          mkdir -p $CI_CACHE_DIR/repocache
          tarball=$CI_CACHE_DIR/repocache/${repocache_urlsuffix%.tgz}.tar
          if [[ ! -r $tarball ]]; then
            wget --continue \
                 $PROGRESS \
                 --retry-connrefused \
                 --read-timeout=60 \
                 $REPOCACHE_URLPREFIX$repocache_urlsuffix \
                 -O - \
              | gunzip > $tarball
          fi
          tar xf $tarball
        else
          wget --continue \
               $PROGRESS \
               --retry-connrefused \
               --read-timeout=60 \
               $REPOCACHE_URLPREFIX$repocache_urlsuffix -O - \
            | tar zx
        fi
        exit 0
      fi
    done
  fi
  ;;
build)
  [[ -n $2 ]] || usage
  board=$2

  if [[ -n $3 ]]; then
    product=$3
    repocache_urlsuffix=$uname_lc-$board-$product.tgz
  else
    product=
    repocache_urlsuffix=$uname_lc-$board.tgz
  fi

  #
  # Example usage:
  #   $ make zest
  #   $ ./repocache build <board> <product (optional)>
  #
  # Upload the resulting repocache-*.tgz somewhere
  #
  [[ ! -d .repo ]] || usage Please run from completely clean workspace
  (
    export REPOCACHE_URLPREFIX=
    $LOCAL_PATH/sync -n $board $product
  )
  if [[ ! -d .repo/project-objects ]] || [[ ! -d .repo/projects ]]; then
    usage "repo projects don't exist, need to sync?"
  fi

  tar zcf $repocache_urlsuffix .repo/project-objects .repo/projects/
  ls -l $repocache_urlsuffix
  echo Please upload to:
  echo "  ${REPOCACHE_URLPREFIX:-http://example.com/repocache-}$repocache_urlsuffix"
  ;;
*)
  usage unknown command: $1
  ;;
esac

exit 0
