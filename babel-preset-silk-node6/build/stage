#! /usr/bin/env node

/**
 * We programatically build the babel plugin list using babel-features.
 *
 * Currently this targets node 4 in the future we will update this to future LTS
 * node versions...
 */

'use strict';

const path = require('path');
const fs = require('fs');

const features = require('babel-features');

const TARGET = path.join(__dirname, '..');
const PKG_PATH = path.join(TARGET, 'package.json');
const DEST = path.join(TARGET, 'staging/index.js');

const DEFAULT_BABEL_VERSION = '6.24.1';
const PLUGIN_VERSION_OVERRIDES = {
  // Add any version overrides here if a plugin isn't availabe as
  // version DEFAULT_BABEL_VERSION.
  'syntax-flow': '6.18.0',
  'syntax-trailing-function-commas': '6.22.0',
  'transform-es2015-destructuring': '6.22.0',
  'transform-export-extensions': '6.22.0',
  'transform-flow-strip-types': '6.22.0',
  'transform-object-rest-spread': '6.22.0',
};

const PLUGIN_SKIP = new Set([
  'syntax-async-functions',
  'syntax-async-generators',
  'syntax-function-sent',
  'transform-es2015-generator-return',
  'transform-exponentiation-operator',
  'transform-regenerator',
]);

const ADDITIONAL_PLUGINS = [
  // flow
  'syntax-flow',
  'transform-flow-strip-types',
  // stage-3
  'transform-async-to-generator',
  // stage 2
  'transform-object-rest-spread',
  'syntax-trailing-function-commas',
  // stage-1
  'transform-class-constructor-call',
  'transform-class-properties',
  'transform-decorators',
  'transform-export-extensions',
];

const es2015Plugins = features.options().plugins.filter((name) => {
  if (Array.isArray(name)) {
    name = name[0];
  }
  return !PLUGIN_SKIP.has(name);
});

const requiredPlugins = new Set(es2015Plugins.concat(ADDITIONAL_PLUGINS));

let pkg = require(PKG_PATH);

if (!pkg.devDependencies) {
  pkg.devDependencies = {};
}

let installedPlugins = [];

for (let plugin of requiredPlugins) {
  let babelName = `babel-plugin-${plugin}`;
  installedPlugins.push(`  require('${babelName}')`);
  let version = PLUGIN_VERSION_OVERRIDES[plugin] || DEFAULT_BABEL_VERSION;
  pkg.devDependencies[babelName] = version;
}

let indexTmpl = `
// Do not edit: this file is automatically generated...
module.exports = {
  plugins: [
    ${installedPlugins.join(', \n')}
  ]
};
`;

fs.writeFileSync(DEST, indexTmpl);
fs.writeFileSync(PKG_PATH, JSON.stringify(pkg, null, 2));
