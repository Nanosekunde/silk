#!/bin/bash -e

# Resolve to realpath....
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
ROOT="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

PATH=$ROOT/../../node_modules/.bin:$PATH
if [[ -r $ROOT/../gnu.sh ]]; then
  source $ROOT/../gnu.sh # Placed by |npm publish|
elif [[ -r $ROOT/../../tools/gnu.sh ]]; then
  source $ROOT/../../tools/gnu.sh
fi


help() {
  if [[ -n $1 ]]; then
    echo Error: $@
    echo
  fi

  echo 'silk-buildjs <source directory> <target directory> [--target=web|node] [--no-ugly] [--no-native] [--dev-server] [--no-externals]'
  echo
  echo 'This program is a helper to build a JS module into a single file and'
  echo 'potentially compile additional native modules if a binding.gyp is present.'
  echo 'Generally this only needs to be invoked by the android build system.'
  exit 1
}

SILK_BUILDJS_SOURCE=
SILK_BUILDJS_DEST=
SILK_BUILDJS_UGLY=true
SILK_BUILDJS_TARGET=node
SILK_BUILDJS_EXTERNALS=true
native=true
dev_server=false

for arg in "$@"; do
  case $arg in
  --target=node)
    SILK_BUILDJS_TARGET=node
    ;;
  --target=web)
    SILK_BUILDJS_TARGET=web
    ;;
  --dev-server)
    dev_server=true
    ;;
  --no-native)
    native=false
    ;;
  --no-ugly)
    SILK_BUILDJS_UGLY=false
    ;;
  --no-externals)
    SILK_BUILDJS_EXTERNALS=false
    ;;
  --*)
    help Unknown argument: $arg
    ;;
  *)
    if [[ -z $SILK_BUILDJS_SOURCE ]]; then
      [[ -d $arg ]] || help Not a directory: $arg
      SILK_BUILDJS_SOURCE=$(readlink -f $arg)
    elif [[ -z $SILK_BUILDJS_DEST ]]; then
      mkdir -p $arg
      SILK_BUILDJS_DEST=$(readlink -f $arg)
    else
      help Extraneous positional parameter: $arg
    fi
    ;;
  esac
done

[[ -n $SILK_BUILDJS_SOURCE ]] || help
[[ -n $SILK_BUILDJS_DEST ]] || help Destination directory missing

export SILK_BUILDJS_SOURCE
export SILK_BUILDJS_DEST
export SILK_BUILDJS_UGLY
export SILK_BUILDJS_TARGET
export SILK_BUILDJS_EXTERNALS

if $native && [[ -f $SILK_BUILDJS_SOURCE/binding.gyp ]]; then
  ## Exports for the node-gyp build system ...
  export builddir_name=$SILK_BUILDJS_DEST/build
  export srcdir=$SILK_BUILDJS_SOURCE
  node_gyp_flags=${SILK_NODE_GYP_FLAGS:-}
  gyp_flags=${SILK_GYP_FLAGS:-}

  pushd $SILK_BUILDJS_SOURCE
  $ROOT/../node_modules/.bin/node-gyp configure $node_gyp_flags -- $gyp_flags
  $ROOT/../node_modules/.bin/node-gyp build
  popd
fi

if [[ $SILK_BUILDJS_TARGET != web ]]; then
  ! $dev_server
  rm -f $SILK_BUILDJS_DEST/package.json

  if $SILK_BUILDJS_UGLY; then
    node -p "\
      p=require('$SILK_BUILDJS_SOURCE/package.json'); \
      u={license: p.license, version: p.version}; \
      if (p.main) u.main = p.main; \
      JSON.stringify(u)" > $SILK_BUILDJS_DEST/package.json
  else
    cp $SILK_BUILDJS_SOURCE/package.json $SILK_BUILDJS_DEST
  fi
fi

if $dev_server; then
  exec webpack-dev-server --progress --config $ROOT/../webpack.config.js \
    --host 0.0.0.0 --port 8000 --progress --hot --inline --watch-poll --watch-aggregate-timeout 300
fi
exec webpack --progress --config $ROOT/../webpack.config.js
