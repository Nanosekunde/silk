#!/bin/bash -e

# Resolve to realpath....
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
ROOT="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

PATH=$ROOT/../../node_modules/.bin:$PATH
if [[ -r $ROOT/../gnu.sh ]]; then
  source $ROOT/../gnu.sh # Placed by |npm publish|
elif [[ -r $ROOT/../../tools/gnu.sh ]]; then
  source $ROOT/../../tools/gnu.sh
fi


help() {
  if [[ -n $1 ]]; then
    echo Error: $@
    echo
  fi

  echo 'silk-buildjs <source directory> <target directory> [--target=web|node] [--no-ugly] [--no-native] [--dev-server] [--no-externals]'
  echo
  echo 'This program is a helper to build a JS module into a single file and'
  echo 'potentially compile additional native modules if a binding.gyp is present.'
  echo 'Generally this only needs to be invoked by the android build system.'
  exit 1
}

SILK_BUILDJS_SOURCE=
SILK_BUILDJS_DEST=
: ${SILK_BUILDJS_UGLY:=true} # Permit environment to override default value
SILK_BUILDJS_TARGET=node
SILK_BUILDJS_EXTERNALS=true
native=true
ndk=false
dev_server=false

for arg in "$@"; do
  case $arg in
  --target=node)
    SILK_BUILDJS_TARGET=node
    ;;
  --target=web)
    SILK_BUILDJS_TARGET=web
    ;;
  --dev-server)
    dev_server=true
    ;;
  --ndk)
    ndk=true
    ;;
  --no-native)
    native=false
    ;;
  --no-ugly)
    SILK_BUILDJS_UGLY=false
    ;;
  --no-externals)
    SILK_BUILDJS_EXTERNALS=false
    ;;
  --*)
    help Unknown argument: $arg
    ;;
  *)
    if [[ -z $SILK_BUILDJS_SOURCE ]]; then
      [[ -d $arg ]] || help Not a directory: $arg
      SILK_BUILDJS_SOURCE=$(readlink -f $arg)
    elif [[ -z $SILK_BUILDJS_DEST ]]; then
      mkdir -p $arg
      SILK_BUILDJS_DEST=$(readlink -f $arg)
    else
      help Extraneous positional parameter: $arg
    fi
    ;;
  esac
done

[[ -n $SILK_BUILDJS_SOURCE ]] || help
[[ -n $SILK_BUILDJS_DEST ]] || help Destination directory missing

export SILK_BUILDJS_SOURCE
export SILK_BUILDJS_DEST
export SILK_BUILDJS_UGLY
export SILK_BUILDJS_TARGET
export SILK_BUILDJS_EXTERNALS

if $native && $ndk; then
  [[ -n $ANDROID_NDK ]] || help Please set ANDROID_NDK to the NDK root directory
  [[ -d $ANDROID_NDK ]] || help ANDROID_NDK not a directory: $ANDROID_NDK

  # TODO: Add command-line argument to select device architecture
  ARCH=arm
  #ARCH=arm64

  # TODO: Add command-line argument to select STL
  STL=gnustl
#  STL=libc++
#  STL=stlport

  case $ARCH in
  arm)
    TRIPLE=arm-linux-androideabi
    CFLAGS="-march=armv7-a -mfloat-abi=softfp -mfpu=neon -fPIC"
    CXXFLAGS="$CFLAGS"
    LDFLAGS="-march=armv7-a -Wl,--fix-cortex-a8"
    ;;
  arm64)
    TRIPLE=aarch64-linux-android
    CFLAGS=
    CXXFLAGS="$CFLAGS"
    LDFLAGS=
    ;;
  *)
    help Unknown arch: $ARCH
    ;;
  esac

  NDK_TOOLCHAIN=$ROOT/ndk-toolchain-$STL

  if [[ ! -d $NDK_TOOLCHAIN ]]; then
    echo Creating standalone toolchain at $NDK_TOOLCHAIN
    (
      set -x
      $ANDROID_NDK/build/tools/make-standalone-toolchain.sh \
        --arch=$ARCH \
        --stl=$STL \
        --install-dir=$NDK_TOOLCHAIN \
        --platform=android-21
    )
  fi

  # Get node-gyp to use the NDK toolchain
  CC="$NDK_TOOLCHAIN/bin/$TRIPLE-clang"
  CXX="$NDK_TOOLCHAIN/bin/$TRIPLE-clang++"
  LINK="$NDK_TOOLCHAIN/bin/$TRIPLE-clang"
  for tool in $CC $CXX $LINK; do
    [[ -x $tool ]] || help $tool does not exist
  done
  export CC="$CC $CFLAGS"
  export CXX="$CXX $CXXFLAGS"
  export LINK="$LINK $LDFLAGS"

  # Setup node-gyp flags
  SILK_GYP_FLAGS="-f make-android -DOS=android -Darch=$ARCH"
  SILK_NODE_GYP_FLAGS="--arch=$ARCH"
fi

if $native && [[ -f $SILK_BUILDJS_SOURCE/binding.gyp ]]; then
  ## Exports for the node-gyp build system ...
  export builddir_name=$SILK_BUILDJS_DEST/build
  export srcdir=$SILK_BUILDJS_SOURCE

  (
    pushd $SILK_BUILDJS_SOURCE
    (
      set -x
      $ROOT/../node_modules/.bin/node-gyp configure $SILK_NODE_GYP_FLAGS -- $SILK_GYP_FLAGS
    )

    if $ndk; then
      SED=sed
      if which gsed > /dev/null 2>&1; then
        SED=gsed # Darwin!
      fi
      # The stock node-gyp that gets picked up in the $ndk builds incorrectly
      # add -fPIE/-pie to CFLAGS/LDFLAGS.  |sed| them out.
      echo and you shall have no pie
      (
        set -x
        $SED -i 's/-fPIE\|-pie//' build/*.mk
      )
    fi

    (
      set -x
      $ROOT/../node_modules/.bin/node-gyp build
    )
  )
fi

if [[ $SILK_BUILDJS_TARGET != web ]]; then
  ! $dev_server
  rm -f $SILK_BUILDJS_DEST/package.json

  if $SILK_BUILDJS_UGLY; then
    node -p "\
      p=require('$SILK_BUILDJS_SOURCE/package.json'); \
      u={license: p.license, version: p.version}; \
      if (p.main) u.main = p.main; \
      JSON.stringify(u)" > $SILK_BUILDJS_DEST/package.json
  else
    cp $SILK_BUILDJS_SOURCE/package.json $SILK_BUILDJS_DEST
  fi
fi

if $dev_server; then
  exec webpack-dev-server --progress --config $ROOT/../webpack.config.js \
    --host 0.0.0.0 --port 8000 --progress --hot --inline --watch-poll --watch-aggregate-timeout 300
fi
exec webpack --progress --config $ROOT/../webpack.config.js
